package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

non terminal INICIO, Import, Imports, MainFunc, Codigo, BloqueCodigo,
UnlogicalVars,EncriptionDef, EncodiginSystemsDef, ArchListDef, ArrayListDef,HashMapListDef,
ProteccionDeDatos, VarParser, Funciones, Directivas, OperadoresMatematicos, OperadoresRelacionales,
OperadoresFor, DeclaracionFlecha, TipoDato, DeclararVar, DeclararFuncion, CallFuncNone, CallFuncData,
TiposDatoFunciones, DeclaracionFunciones, Params, ParamsParentesis, IdentificadorFlecha,
AsignacionTipoDatoVar, DeclararArreglo, Condiciones, IfStatement, Condicion, NumOrID,
NumOrIDOrString, ComillasCierre, NumOrIDOrStringOrEmpty, GrammarSwitch, SwitchStatement,
DoWhileStatement, WhileStatement, ForStatement, DeclaracionAsignacionVar, GrammarSwitches,
SetEncription, SetFile, SetArch, SetDate, SetTime, SetArglist, SetMakeRef, SetRefType
, SetRefValue, SetOut, SetIn, SetBox, BooleanSelector, SetUnbox, SetIs, SetPragma, SetFunction, SetUnboxAny, RegionConfig,
SetEncoding, SetUUID, ElifDef, SetIfDef, SetElif, SetError, SetInclude, SetHasOccp, defineConfigMainContent,
SetAsciiEnco, ClassDeclarations, defineConfigMains, defineConfigMain, SetRegionConfig;

terminal MAS ,MENOS, ESPACIO , NUMERO, MAIN,IDENTIFICADOR ,POR ,DIV ,MOD  ,INCREMENTO ,DECREMENTO ,MASIGUAL ,MENOSIGUAL ,PORIGUAL ,DIVIGUAL ,MODIGUAL ,SPLIT ,REPLACE ,SUBSTRING ,INDEXOF ,LASTINDEXOF ,CONTAINS ,STARTSWITH ,ENDSWITH ,TRIM ,FILE ,FILEMODE ,FILEACCESS ,FILESHARE ,FILEOPTIONS ,FILEATTRIBUTES ,VAR_PARSE_SINGLE ,VAR_PARSE_DOUBLE ,VAR_PARSE_INT ,VAR_PARSE_INT16 ,VAR_PARSE_INT32  ,VAR_PARSE_INT64 ,VAR_PARSE_UINT ,VAR_PARSE_UINT16 ,VAR_PARSE_UINT32 ,VAR_PARSE_UINT64 ,VAR_PARSE_DECIMAL ,VAR_PARSE_BOOLEAN ,VAR_PARSE_CHAR ,VAR_PARSE_STRING ,VAR_PARSE_BYTE ,VAR_PARSE_SBYTE ,VAR_PARSE_OBJECT ,VAR_PARSE_FLOAT ,LAMBDA ,BOOL ,BYTE ,CHAR ,DECIMAL ,DOUBLE ,FLOAT ,INT ,LONG ,OBJECT ,SBYTE ,SHORT ,STRING ,UINT ,ULONG ,USHORT ,LET ,PUBLIC ,PRIVATE ,PROTECTED ,INTERNAL ,STATIC ,VIRTUAL ,SEALED ,OVERRIDE ,ABSTRACT ,READONLY ,VOID ,LOCAL ,IF  ,SWITCH ,CASE ,DEFAULT ,TYPEDEF ,UNION ,AUTO ,REGISTER ,EXTERN ,CONST ,VOLATILE ,IMPORT ,CALL ,CALLBACK ,WHILE ,DO ,FOR ,FOREACH ,TRUE ,FALSE ,BREAK ,CONTINUE ,GOTO ,PASS ,TRY ,CATCH ,FINALLY ,THROW ,IF_NOT_EXISTS ,FASTCALL ,USING ,NAMESPACE ,CLASS ,STRUCT ,ENUM ,INTERFACE ,DELEGATE ,EVENT ,OPERATOR ,SIZEOF ,TYPEOF ,NEW ,THIS ,BASE ,ASM ,AS ,TRY_CAST ,REINTERPRET_CAST ,DLLIMPORT ,DLLEXPORT ,DYNAMIC_CAST ,INSTANCEOF ,ASYNC ,AWAIT ,REGION ,ENDREGION  ,LINE ,COLUMN ,FUNCTION ,DATE ,TIME ,DATETIME ,UUID ,ARGLIST ,MAKEREF ,REFTYPE ,REFVALUE ,OUT ,IN ,INOUT ,BOX ,UNBOX ,UNBOXANY ,IS ,DEFINE ,UNDEFINE ,IFDEF ,IFNDEF ,ELIF ,ELSE ,ENDIF ,ERROR ,WARNING ,PRAGMA ,INCLUDE ,INCLUDE_NEXT ,HAS_INCLUDE ,HAS_INCLUDE_NEXT ,HAS_OCPP_ATTRIBUTE ,UNSIGNED ,ARRAY ,ARRAYLIST ,LIST ,DICTIONARY ,QUEUE ,STACK ,HASHSET ,HASHMAP ,HASHLIST ,HASHQUEUE ,HASHSTACK ,HASHDICTIONARY ,BYTEARRAY ,SBYTEARRAY ,CHARARRAY ,SHORTARRAY ,INTARRAY ,LONGARRAY ,FLOATARRAY ,DOUBLEARRAY ,BOOLARRAY ,STRINGARRAY ,OBJECTARRAY ,UINTARRAY ,ULONGARRAY ,USHORTARRAY ,DECIMALARRAY ,VARARRAY ,INT16ARRAY ,INT32ARRAY ,INT64ARRAY ,UINT16ARRAY ,UINT32ARRAY ,UINT64ARRAY ,ARCH ,ARCH32 ,ARCH64 ,ARCH128 ,ARCHARM ,ARCHARM32 ,ARCHARM64 ,ARCHM1 ,ARCHM2 ,ASCII ,UTF8 ,UTF16 ,UTF32 ,UTF7 ,UTF1 ,AES ,AES128 ,AES192 ,AES256 ,AES512 ,RETURN ,THREAD ,THREADPOOL ,THREADSTART ,THREADABORT ,THREADABORTEXCEPTION ,THREADSTATE ,THREADPRIORITY ,THREADPRIORITYLEVEL ,THREADEXCEPTION ,THREADEXCEPTIONHANDLER ,THREADEXCEPTIONMODE ,THREADEXCEPTIONSOURCE ,NONE ,NULL ,ASIGNACION ,ASIGNACION_EXPLICITA ,COMILLAS ,FLECHA ,COMA ,IGUAL_IGUAL ,DIFERENTE ,MAYOR ,MENOR ,MAYOR_IGUAL ,MENOR_IGUAL ,AND ,OR ,NOT ,NOT_NOT ,INTERROGACION ,NUMERAL ,ARROBA ,DUMP ,KRYPTOL ,ZEPHYRSCRIPT ,XYLOCODE ,QUARKY ,SYNTHETIX ,TESSERACT ,NIMBIC ,AXIOMATE ,JOLTSCRIPT ,NEXU ,INTEGROSCRIPT ,NOVALISP ,ZENITHCODE ,OSMOSIS ,ENVISION ,VELOCISCRIPT ,HELIXLANG ,FUSIONX ,OMNICODE ,VORTEXSCRIPT ,LUMINA ,NEBULACODE ,SYNAPSEX ,QUARTZSCRIPT ,INFERNO ,SPECTRASCRIPT ,FLUXLANG ,AURUMSCRIPT ,CHROMALANG ,POLARISCODE ,CYPHERX ,ALGOMIND ,STRATACODE ,QUANTUMLANG ,EXOSCRIPT ,PARENTESIS_IZQ ,PARENTESIS_DER ,CORCHETE_IZQ ,CORCHETE_DER ,LLAVE_IZQ ,LLAVE_DER ,PUNTO ,PUNTO_COMA ,DOS_PUNTOS,
_REGION, _ENDREGION,_PRAGMA,_LINE,_COLUMN,_FILE,_FUNCTION,_DATE,_TIME,_DATETIME,_UUID,_ARGLIST,_MAKEREF,_REFTYPE,_REFVALUE,_OUT,_IN,_INOUT,_BOX,_UNBOX,_UNBOXANY,_IS,_DEFINE,_UNDEFINE,_IFDEF,_ELIF, PRINT;
start with INICIO;

TipoDato::= LAMBDA|BOOL|BYTE|CHAR|DECIMAL|DOUBLE|FLOAT|INT|LONG|OBJECT|SBYTE|SHORT|STRING|UINT|ULONG|USHORT|LET;
UnlogicalVars::=KRYPTOL|ZEPHYRSCRIPT|XYLOCODE|QUARKY|SYNTHETIX|TESSERACT|NIMBIC|AXIOMATE|JOLTSCRIPT|NEXU|INTEGROSCRIPT|NOVALISP|ZENITHCODE|OSMOSIS|ENVISION|VELOCISCRIPT|HELIXLANG|FUSIONX|OMNICODE|VORTEXSCRIPT|LUMINA|NEBULACODE|SYNAPSEX|QUARTZSCRIPT|INFERNO|SPECTRASCRIPT|FLUXLANG|AURUMSCRIPT|CHROMALANG|POLARISCODE|CYPHERX|ALGOMIND|STRATACODE|QUANTUMLANG|EXOSCRIPT;
EncriptionDef::= AES|AES128|AES192|AES256|AES512;
EncodiginSystemsDef::=UTF8|UTF16|UTF32|UTF7|UTF1;
ArchListDef::=ARCH32|ARCH64|ARCH128|ARCHARM|ARCHARM32|ARCHARM64|ARCHM1|ARCHM2;
ArrayListDef::= ARRAYLIST|LIST|DICTIONARY|QUEUE|STACK|BYTEARRAY|SBYTEARRAY|CHARARRAY|SHORTARRAY|INTARRAY|LONGARRAY|FLOATARRAY|DOUBLEARRAY|BOOLARRAY|STRINGARRAY|OBJECTARRAY|UINTARRAY|ULONGARRAY|USHORTARRAY|DECIMALARRAY|VARARRAY|INT16ARRAY|INT32ARRAY|INT64ARRAY|UINT16ARRAY|UINT32ARRAY|UINT64ARRAY;
HashMapListDef::= HASHSET|HASHMAP|HASHLIST|HASHQUEUE|HASHSTACK|HASHDICTIONARY;
ProteccionDeDatos::= PUBLIC|PRIVATE|PROTECTED|INTERNAL|STATIC|VIRTUAL|SEALED|OVERRIDE|ABSTRACT|READONLY;
VarParser::= VAR_PARSE_BOOLEAN|VAR_PARSE_BYTE|VAR_PARSE_CHAR|VAR_PARSE_DECIMAL|VAR_PARSE_DOUBLE|VAR_PARSE_FLOAT|VAR_PARSE_INT|VAR_PARSE_INT16|VAR_PARSE_INT32|VAR_PARSE_INT64|VAR_PARSE_OBJECT|VAR_PARSE_SBYTE|VAR_PARSE_STRING|VAR_PARSE_UINT|VAR_PARSE_UINT16|VAR_PARSE_UINT32|VAR_PARSE_UINT64;
Funciones::= SPLIT|REPLACE|SUBSTRING|INDEXOF|LASTINDEXOF|CONTAINS|STARTSWITH|ENDSWITH|TRIM|SIZEOF|TYPEOF;
Directivas::= _REGION|REGION|_ENDREGION|ENDREGION|_PRAGMA|PRAGMA|_LINE|LINE|_COLUMN|COLUMN|_FILE|FILE|_FUNCTION|FUNCTION|_DATE|DATE|_TIME|TIME|_DATETIME|DATETIME|_UUID|UUID|_ARGLIST|ARGLIST|_MAKEREF|MAKEREF|_REFTYPE|REFTYPE|_REFVALUE|REFVALUE|_OUT|OUT|_IN|IN|_INOUT|INOUT|_BOX|BOX|_UNBOX|UNBOX|_UNBOXANY|UNBOXANY|_IS|IS|_DEFINE|DEFINE|_UNDEFINE|UNDEFINE|_IFDEF|_IFDEF|IFNDEF|_ELIF|ELSE|ENDIF|LINE|ERROR|PRAGMA|WARNING|INCLUDE|INCLUDE_NEXT|HAS_INCLUDE|HAS_INCLUDE_NEXT|HAS_OCPP_ATTRIBUTE|UNSIGNED;
OperadoresMatematicos::=MAS|MOD|MENOS|POR|DIV;
OperadoresRelacionales::= IGUAL_IGUAL|DIFERENTE|MAYOR|MENOR|MAYOR_IGUAL|MENOR_IGUAL;
OperadoresFor::= DECREMENTO|INCREMENTO;

//Datos asignacion
NumOrID::= NUMERO | IDENTIFICADOR;
NumOrIDOrString::= NumOrID | COMILLAS IDENTIFICADOR COMILLAS;
ComillasCierre::= COMILLAS COMILLAS;
NumOrIDOrStringOrEmpty::= NumOrIDOrString | NONE | NULL | ComillasCierre;



//Statements
IfStatement::= IF PARENTESIS_IZQ Condiciones PARENTESIS_DER LLAVE_IZQ Codigo LLAVE_DER;
Condiciones::= Condiciones AND Condicion | Condicion OR Condicion | Condicion;
Condicion::= NumOrID OperadoresRelacionales NumOrID | IDENTIFICADOR;

GrammarSwitch::= CASE NumOrIDOrString DOS_PUNTOS Codigo BREAK PUNTO_COMA | DEFAULT DOS_PUNTOS Codigo BREAK PUNTO_COMA;
GrammarSwitches::= GrammarSwitch | GrammarSwitch GrammarSwitches;
SwitchStatement::= SWITCH PARENTESIS_IZQ IDENTIFICADOR PARENTESIS_DER LLAVE_IZQ GrammarSwitches LLAVE_DER;
DoWhileStatement::= DO LLAVE_IZQ Codigo LLAVE_DER WHILE PARENTESIS_IZQ Condiciones PARENTESIS_DER PUNTO_COMA;
ForStatement::= FOR PARENTESIS_IZQ DeclaracionAsignacionVar Condiciones PUNTO_COMA IDENTIFICADOR OperadoresFor PARENTESIS_DER LLAVE_IZQ Codigo LLAVE_DER;
WhileStatement::= WHILE PARENTESIS_IZQ Condiciones PARENTESIS_DER LLAVE_IZQ Codigo LLAVE_DER;

//Classes

//Bloques de codigo, identificadores numeros y nulos
BloqueCodigo::= LLAVE_IZQ Codigo LLAVE_DER | LLAVE_IZQ LLAVE_DER;
Params::= IDENTIFICADOR COMA Params| IDENTIFICADOR;
ParamsParentesis::= PARENTESIS_IZQ Params PARENTESIS_DER;

//Llamar funciones y creacion de funciones
TiposDatoFunciones::= TipoDato | VOID | NONE;
MainFunc::= PUNTO MAIN DOS_PUNTOS BloqueCodigo;
DeclararFuncion::= PUNTO IDENTIFICADOR TiposDatoFunciones DOS_PUNTOS BloqueCodigo;
DeclaracionFunciones::= DeclararFuncion | DeclararFuncion DeclaracionFunciones;
CallFuncNone::= CALL PUNTO IDENTIFICADOR PUNTO_COMA;
CallFuncData::= CALLBACK FLECHA IDENTIFICADOR PUNTO IDENTIFICADOR ParamsParentesis PUNTO_COMA;

DeclaracionAsignacionVar::=AsignacionTipoDatoVar TipoDato ASIGNACION NumOrIDOrStringOrEmpty PUNTO_COMA;
DeclararVar::=  AsignacionTipoDatoVar TipoDato PUNTO_COMA;
AsignacionTipoDatoVar::=IDENTIFICADOR FLECHA;
DeclararArreglo::= ArrayListDef MENOR TipoDato MAYOR IDENTIFICADOR PUNTO_COMA;

Codigo::=   DeclararVar Codigo | 
            CallFuncNone Codigo|
            CallFuncData Codigo|
            DeclararArreglo Codigo|
            IfStatement Codigo|
            SwitchStatement Codigo|
            DoWhileStatement Codigo|
            ForStatement Codigo|
            WhileStatement Codigo|
            DeclaracionAsignacionVar Codigo|
            DeclararArreglo | 
            DeclararVar     | 
            CallFuncNone    |
            CallFuncData    |
            IfStatement     |
            SwitchStatement |
            DoWhileStatement|
            ForStatement    |
            WhileStatement  |
            DeclaracionAsignacionVar
            ;


SetEncription::= AES DOS_PUNTOS EncriptionDef PUNTO_COMA;
SetFile::= FILE DOS_PUNTOS IDENTIFICADOR PUNTO_COMA;
SetArch::=ARCH DOS_PUNTOS ArchListDef PUNTO_COMA;
SetDate::= DATE DOS_PUNTOS IDENTIFICADOR PUNTO_COMA;
SetTime::= TIME DOS_PUNTOS IDENTIFICADOR PUNTO_COMA;
SetArglist::= ARGLIST DOS_PUNTOS IDENTIFICADOR PUNTO_COMA;
SetMakeRef::= MAKEREF DOS_PUNTOS IDENTIFICADOR PUNTO_COMA;
SetRefType::= REFTYPE DOS_PUNTOS IDENTIFICADOR PUNTO_COMA;
SetRefValue::= REFVALUE DOS_PUNTOS IDENTIFICADOR PUNTO_COMA;
SetOut::= OUT DOS_PUNTOS IDENTIFICADOR PUNTO_COMA;
SetIn ::= IN DOS_PUNTOS IDENTIFICADOR PUNTO_COMA;
SetBox ::= BOX DOS_PUNTOS BooleanSelector PUNTO_COMA;
SetUnbox::= UNBOX DOS_PUNTOS BooleanSelector PUNTO_COMA;
BooleanSelector::= TRUE | FALSE;
SetIs ::= IS DOS_PUNTOS BooleanSelector PUNTO_COMA;
SetPragma::= PRAGMA DOS_PUNTOS IDENTIFICADOR PUNTO_COMA;
SetFunction::= FUNCTION DOS_PUNTOS IDENTIFICADOR PUNTO_COMA;
SetUnboxAny::= UNBOXANY DOS_PUNTOS BooleanSelector PUNTO_COMA;
SetUUID::= UUID DOS_PUNTOS IDENTIFICADOR PUNTO_COMA | _UUID DOS_PUNTOS IDENTIFICADOR PUNTO_COMA ;

RegionConfig ::= SetArch            RegionConfig
                | SetEncription     RegionConfig
                | SetEncoding       RegionConfig
                | SetFile           RegionConfig
                | SetTime           RegionConfig
                | SetDate           RegionConfig
                | SetUUID           RegionConfig
                | SetArglist        RegionConfig
                | SetMakeRef        RegionConfig
                | SetRefType        RegionConfig
                | SetRefValue       RegionConfig
                | SetOut            RegionConfig
                | SetIn             RegionConfig
                | SetBox            RegionConfig
                | SetUnbox          RegionConfig
                | SetIs             RegionConfig
                | SetFunction       RegionConfig
                | SetUnboxAny       RegionConfig
                | SetArch      
                | SetEncription
                | SetEncoding  
                | SetFile      
                | SetTime      
                | SetDate      
                | SetUUID      
                | SetArglist   
                | SetMakeRef   
                | SetRefType   
                | SetRefValue  
                | SetOut       
                | SetIn        
                | SetBox       
                | SetUnbox     
                | SetIs        
                | SetFunction  
                | SetUnboxAny  
               ;


ElifDef::= ARCH | NONE;
SetIfDef::= IFDEF DOS_PUNTOS ARCH IGUAL_IGUAL ArchListDef PUNTO_COMA | IFNDEF DOS_PUNTOS ARCH IGUAL_IGUAL ArchListDef PUNTO_COMA | _IFDEF DOS_PUNTOS ARCH IGUAL_IGUAL ArchListDef PUNTO_COMA; 
SetElif::= ELIF DOS_PUNTOS ElifDef PUNTO_COMA;
SetError::=  ERROR DOS_PUNTOS IDENTIFICADOR PUNTO_COMA;
SetInclude::= INCLUDE DOS_PUNTOS IDENTIFICADOR PUNTO_COMA;
SetHasOccp::= HAS_OCPP_ATTRIBUTE DOS_PUNTOS BooleanSelector PUNTO_COMA;
SetAsciiEnco::= ASCII DOS_PUNTOS EncodiginSystemsDef PUNTO_COMA;
SetRegionConfig::= REGION LLAVE_IZQ RegionConfig LLAVE_DER ENDREGION PUNTO_COMA | REGION LLAVE_IZQ LLAVE_DER ENDREGION PUNTO_COMA;

defineConfigMain::= DEFINE LLAVE_IZQ defineConfigMainContent LLAVE_DER PUNTO_COMA;
defineConfigMains::= defineConfigMains defineConfigMain | defineConfigMain;
defineConfigMainContent ::=   SetIfDef defineConfigMainContent
                            | SetElif defineConfigMainContent
                            | SetError defineConfigMainContent
                            | SetInclude defineConfigMainContent
                            | SetHasOccp defineConfigMainContent
                            | SetAsciiEnco defineConfigMainContent
                            | SetIfDef
                            | SetElif
                            | SetError
                            | SetInclude
                            | SetHasOccp
                            | SetAsciiEnco
                            ;

Imports::= Import | Import Imports;
Import::= IMPORT IDENTIFICADOR PUNTO_COMA;


INICIO::=     MainFunc
            | MainFunc DeclaracionFunciones
            | Imports MainFunc 
            | Imports defineConfigMains MainFunc 
            | Imports MainFunc DeclaracionFunciones
            | Imports SetRegionConfig MainFunc DeclaracionFunciones 
            | Imports SetRegionConfig defineConfigMains  MainFunc DeclaracionFunciones;